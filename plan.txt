models:

    listings:
        what i need:
            id
            listing_tite
            listing_current_price
            lsiting_starting_price
            seller-name

        whitepaper:
            class Listing(models.Model):
                listing_title = models.CharField(max_length=255)
                listing_description = models.TextField()
                listing_current_price = models.DecimalField(max_digits=10, decimal_places=2)
                listing_starting_price = models.DecimalField(max_digits=10, decimal_places=2)
                seller = models.ForeignKey(User, on_delete=models.CASCADE)

                created_at = models.DateTimeField(auto_now_add=True)
                updated_at = models.DateTimeField(auto_now=True)
                
                # Status
                STATUS_CHOICES = [
                    ('active', 'Active'),
                    ('closed', 'Closed'),
                    ('pending', 'Pending'),
                ]
                status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='active')

                def __str__(self):
                    return self.listing_title
            
    bids:
        what i need:
            id
            buyer-id
            buyer-bid

        whitepaper:
            class Bid(models.Model):
                listing = models.ForeignKey(Listing, on_delete=models.CASCADE)
                bidder = models.ForeignKey(User, on_delete=models.CASCADE)
                bid_amount = models.DecimalField(max_digits=10, decimal_places=2)

                created_at = models.DateTimeField(auto_now_add=True)
                updated_at = models.DateTimeField(auto_now=True)

                
                STATUS_CHOICES = [
                    ('accepted', 'Accepted'),
                    ('rejected', 'Rejected'),
                    ('pending', 'Pending'),
                ]
                status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='pending')

                def __str__(self):
                    return f"Bid of {self.bid_amount} for {self.listing.listing_title}"

    comments:
        what i need:
            id
            comment_contents
            user_id
        
        whitepaper:
            class Comment(models.Model):
                listing = models.ForeignKey(Listing, on_delete=models.CASCADE)
                comment_contents = models.TextField()
                user = models.ForeignKey(User, on_delete=models.CASCADE)
                created_at = models.DateTimeField(auto_now_add=True)
                updated_at = models.DateTimeField(auto_now=True)

             def __str__(self):
                return f"Comment by {self.user.username} on {self.listing.listing_title}"